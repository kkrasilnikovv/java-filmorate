package ru.yandex.practicum.filmorate.storage.jdbc.impl;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.simple.SimpleJdbcInsert;
import org.springframework.jdbc.support.rowset.SqlRowSet;
import org.springframework.stereotype.Repository;
import ru.yandex.practicum.filmorate.model.Film;
import ru.yandex.practicum.filmorate.model.Mpa;
import ru.yandex.practicum.filmorate.storage.jdbc.FilmDao;

import java.sql.Date;
import java.util.*;


@Repository("FilmDaoImpl")
public class FilmDaoImpl implements FilmDao {
    private final JdbcTemplate jdbcTemplate;

    private static final String SELECT_ALL = "select FILMS.FILM_ID, FILMS.NAME, FILMS.DESCRIPTION, FILMS.RELEASE_DATE,"
            + " FILMS.DURATION, FILMS.MPAA_ID, MPAA.NAME as MPAA_NAME from films " +
            "join MPAA on FILMS.MPAA_ID = MPAA.MPAA_ID order by FILM_ID ";
    private static final String SELECT_BY_ID = "select f.FILM_ID as FILM_ID, f.NAME , f.DESCRIPTION, f.RELEASE_DATE, " +
            "f.DURATION, f.MPAA_ID, M2.NAME as MPAA_NAME, L.USER_ID as `LIKE` " +
            "from films f  left join LIKES L " +
            "on f.FILM_ID = L.FILM_ID " +
            "left join MPAA M2 on f.MPAA_ID = M2.MPAA_ID " +
            "where f.FILM_ID = ?";

    @Autowired
    public FilmDaoImpl(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    @Override
    public void reset() {
        final String sql = "DROP TABLE IF EXISTS films CASCADE; " +
                "create table IF NOT EXISTS films(" +
                "    film_id      INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\n" +
                "    name         VARCHAR(255),\n" +
                "    description  VARCHAR(255),\n" +
                "    release_date Date,\n" +
                "    duration     VARCHAR(10),\n" +
                "    mpaa_id      int,\n" +
                "    CONSTRAINT fk_mpaa FOREIGN KEY (MPAA_id) REFERENCES MPAA(MPAA_ID) " +
                "    ON DELETE CASCADE ON UPDATE CASCADE);";
        jdbcTemplate.update(sql);
    }

    @Override
    public List<Film> getAllFilms() {
        SqlRowSet rs = jdbcTemplate.queryForRowSet(SELECT_ALL);
        return mappingFilm(rs);
    }

    @Override
    public Optional<Film> findById(Integer id) {
        SqlRowSet rs = jdbcTemplate.queryForRowSet(SELECT_BY_ID, id);
        List<Film> films = mappingFilm(rs);
        if (films.isEmpty()) {
            return Optional.empty();
        } else {
            return Optional.of(films.get(0));
        }

    }

    @Override
    public Film addFilm(Film film) {

        SimpleJdbcInsert simpleJdbcInsert = new SimpleJdbcInsert(jdbcTemplate)
                .withTableName("FILMS")
                .usingGeneratedKeyColumns("FILM_ID");

        film.setId(simpleJdbcInsert.executeAndReturnKey(this.filmToMap(film)).intValue());
        return film;
    }

    @Override
    public int updateFilm(Film film) {
        final String sql = "update FILMS set NAME = ?, DESCRIPTION = ?,RELEASE_DATE = ?, DURATION = ?, MPAA_ID = ?   where FILM_ID = ?";
        return jdbcTemplate.update(sql
                , film.getName()
                , film.getDescription()
                , Date.valueOf(film.getReleaseDate())
                , film.getDuration()
                , film.getMpa().getId()
                , film.getId());

    }

    private Map<String, Object> filmToMap(Film film) {
        Map<String, Object> values = new HashMap<>();
        values.put("NAME", film.getName());
        values.put("DESCRIPTION", film.getDescription());
        values.put("RELEASE_DATE", film.getReleaseDate());
        values.put("DURATION", film.getDuration());
        if (film.getMpa() != null) {
            values.put("MPAA_ID", film.getMpa().getId());
        }

        return values;
    }

    private List<Film> mappingFilm(SqlRowSet rs) {
        List<Film> films = new ArrayList<>();
        while (rs.next()) {
            Film film = new Film(
                    rs.getInt("film_id"),
                    rs.getString("name"),
                    rs.getString("description"),
                    rs.getDate("release_date").toLocalDate(),
                    (rs.getInt("duration")),
                    new Mpa(rs.getInt("MPAA_ID"), rs.getString("MPAA_NAME"))
            );
            films.add(film);
        }
        return films;
    }

}
